import logging
from typing import Dict, List
import json
import subprocess
import matplotlib.pyplot as plt
import os

logger = logging.getLogger(__name__)


def parse_colors(
        config: Dict,
        theme_name: str,
        **kwargs
) -> Dict:
    """Function to parse the colorscheme

    Arguments to config:

    - method: "manual" or "pywal"

    """

    allowed_methods: List[str] = ['manual', 'pywal']
    method: str = config['colors'].get('method', 'manual')

    if method not in allowed_methods:
        raise ValueError("method not supported. Expected one of: " +
                         allowed_methods + f" but got {method}")

    colorscheme_path: str = os.path.join(
        ".", "themes", theme_name, "colors", "colorscheme.json")

    if method == 'pywal':
        wallpaper_path: str = config['wallpaper']['file']

        # if just the filename was given, look in the project'
        # wallpaper folder:
        if '/' not in wallpaper_path:
            wallpaper_path = os.path.join('.', 'wallpapers', wallpaper_path)
        pallet = _configure_pywal_colors(wallpaper_path)
        _write_pallet_to_colorscheme(pallet, colorscheme_path)

    with open(colorscheme_path, "r") as f:
        colorscheme = json.load(f)
    make_pallet_image(colorscheme)
    return config


def _write_pallet_to_colorscheme(pallet: str,
                                 colorscheme_path: str):
    if not os.path.exists(colorscheme_path):
        with open(colorscheme_path, "w") as f:
            json.dump(pallet, f)

    else:
        with open(colorscheme_path, "r") as f:
            scheme = json.load(f)
        for key in pallet:
            scheme[key] = pallet[key]
        with open(colorscheme_path, "w") as f:
            json.dump(scheme, f, indent=2)


def _configure_pywal_colors(wallpaper_path: str) -> Dict:
    """Generate a color pallet using pywal.

    Parameters
    ----------
    wallpaper_path : str
        path to the wallpaper
    """

    # run pywal in the shell
    subprocess.run(["wal", "-n", "-e", "-i", wallpaper_path],
                   capture_output=False)
    logger.debug(f"ran pywal on {wallpaper_path}")

    # get the colors file generated by pywal
    colors_file = os.path.expanduser("~/.cache/wal/colors.json")

    with open(colors_file, "r") as f:
        pywal_colors = json.load(f)

    logger.debug(f"colors file: {json.dumps(pywal_colors, indent=2)}")

    pallet = {}
    for s in pywal_colors["special"]:
        pallet[s] = pywal_colors["special"][s]
    for c in pywal_colors["colors"]:
        pallet[c] = pywal_colors["colors"][c]

    logger.debug("pallet configuration successful")

    return pallet


def make_pallet_image(pallet: Dict):
    """Generate an image out of all the colors in the pallet.

    Parameters
    ----------
    pallet : Dict
        Dictionary of hex colors
    """

    total_colors = len(pallet)
    nrows = (total_colors + 1) // 2
    ncols = 2
    colors_list = list(pallet.values())
    titles = list(pallet.keys())
    fig, axes = plt.subplots(nrows=nrows, ncols=ncols, figsize=(6, 2 * nrows))
    axes = axes.flatten()
    for i, color in enumerate(colors_list):
        axes[i].set_facecolor(color)
        axes[i].xaxis.set_visible(False)
        axes[i].yaxis.set_visible(False)
        axes[i].set_title(f"{titles[i]}: {color}")
    fig.suptitle("Color Palette", fontsize=14)

    plt.savefig("./tmp/pallet.png", dpi=300, bbox_inches="tight")
