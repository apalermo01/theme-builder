import logging
from typing import Dict
import os
import json
import subprocess
import matplotlib.pyplot as plt
import json

logger = logging.getLogger(__name__)


def parse_colors(
    config: Dict,
    template=None,
    dest=None,
) -> Dict:
    """parse_colors.

    Parameters
    -----------
    config : Dict
        This is the configuration for colors. It should be in this format:

        ```
        "colors": {
            "settings": {
                "color_mode": <"manual" or "pywal">
                },
            (optional) "pallet": {}
        ```

        if the "color_mode" is "pywal", then the colors will be generated from the
        wallpaper. If the mode is "manual", then the "pallet" dictionary should be
        filled out.

        TODO: fill out exactly what options are expected for colors. Theme 000
        has "background", "foreground", "cursorcolor", and "color0" through "color15"
    """

    # Use pywal to derive colors
    if config is None or (
        "settings" in config["colors"]
        and config["colors"]["settings"]["color_mode"] == "pywal"
    ):
        wallpaper_path = config["wallpaper"]
        if "wallpapers" not in wallpaper_path:
            logger.warning(
                f"{wallpaper_path} does not look like a full path. Changing to ./wallpapers/{wallpaper_path}"
            )
            wallpaper_path = f"./wallpapers/{wallpaper_path}"
        logger.info(f"loading wallpaper from {wallpaper_path}")
        pallet = configure_pywal_colors(wallpaper_path)
        logger.debug(f"pallet derived from pywal")
        config["colors"]["pallet"] = pallet

    elif config["colors"]["settings"]["color_mode"] == "manual":
        # remove rofi colors (used in default configs)
        pallet_new = {}
        for p in config["colors"]["pallet"]:
            if "rofi" not in p:
                pallet_new[p] = config["colors"]["pallet"][p]
        config["colors"]["pallet"] = pallet_new
        pallet = config["colors"]["pallet"]

        logger.debug("using manual pallet")
    else:
        raise ValueError("unexpected combination of parameters in settings")

    # add black to the pallet
    if "black" not in config["colors"]["pallet"]:
        config["colors"]["pallet"]["black"] = "#000000"

    # write the color pallet to temp file for reference
    make_pallet_image(pallet)
    with open("./tmp/pallet.json", "w") as f:
        json.dump(pallet, f, indent=2)

    return config


def configure_pywal_colors(wallpaper_path: str) -> Dict:
    """Generate a color pallet using pywal.

    Parameters
    ----------
    wallpaper_path : str
        path to the wallpaper
    """

    # run pywal in the shell
    subprocess.run(["wal", "-n", "-e", "-i", wallpaper_path], capture_output=False)
    logger.debug(f"ran pywal on {wallpaper_path}")

    # get the colors file generated by pywal
    colors_file = os.path.expanduser("~/.cache/wal/colors.json")

    with open(colors_file, "r") as f:
        pywal_colors = json.load(f)

    logger.debug(f"colors file: {json.dumps(pywal_colors, indent=2)}")

    pallet = {}
    for s in pywal_colors["special"]:
        pallet[s] = pywal_colors["special"][s]
    for c in pywal_colors["colors"]:
        pallet[c] = pywal_colors["colors"][c]
    logger.debug("pallet configuration successful")
    return pallet


def make_pallet_image(pallet: Dict):
    """Generate an image out of all the colors in the pallet.

    Parameters
    ----------
    pallet : Dict
        Dictionary of hex colors
    """

    total_colors = len(pallet)
    nrows = (total_colors + 1) // 2
    ncols = 2
    colors_list = list(pallet.values())
    titles = list(pallet.keys())
    fig, axes = plt.subplots(nrows=nrows, ncols=ncols, figsize=(6, 2 * nrows))
    axes = axes.flatten()
    for i, color in enumerate(colors_list):
        axes[i].set_facecolor(color)
        axes[i].xaxis.set_visible(False)
        axes[i].yaxis.set_visible(False)
        axes[i].set_title(f"{titles[i]}: {color}")
    fig.suptitle("Color Palette", fontsize=14)

    plt.savefig("./tmp/pallet.png", dpi=300, bbox_inches="tight")
